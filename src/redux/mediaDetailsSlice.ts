import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "./store";

import { fetchMedia, fetchSimilarMedia } from "../api/media";
import { toDetailsView, toListView } from "../api/transformers";
import { MediaDetails, MediaType, Media } from "../types/Media";

export interface MediaDetailsState {
  loading: boolean;
  selectedMediaDetails: MediaDetails;
  similarMedia: Media[];
  similarLoading: boolean;
}

export const initialState: MediaDetailsState = {
  loading: false,
  selectedMediaDetails: {
    title: "",
    id: undefined,
    poster_path: "",
    backdrop_path: "",
    vote_average: undefined,
    overview: "",
    tagline: "",
    release_date: "",
  },
  similarMedia: [],
  similarLoading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getMediaDetailsAsync())`. This
// will call the thunk with the `dispatch` function as the first argument.
export const getMediaDetailsAsync = createAsyncThunk(
  "mediaDetails/fetchMediaDetails",
  async ({ mediaType, id }: { mediaType: MediaType; id?: number }) => {
    const mediaDetailsResponse = await fetchMedia(mediaType, id);
    // The value we return becomes the `fulfilled` action payload
    const transformedMediaDetails = toDetailsView(mediaDetailsResponse.data);
    return transformedMediaDetails;
  }
);

export const getSimilarMediaAsync = createAsyncThunk(
  "mediaDetails/fetchSimilarMedia",
  async ({ mediaType, id }: { mediaType: MediaType; id?: number }) => {
    console.log("mediaType", mediaType);
    const mediaResponse = await fetchSimilarMedia(mediaType, id);
    // The value we return becomes the `fulfilled` action payload
    const transformedSimilarMedia = toListView(mediaResponse.data.results);
    return transformedSimilarMedia;
  }
);

export const mediaDetailsSlice = createSlice({
  name: "mediaDetails",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearMediaDetails: (state) => {
      state.selectedMediaDetails = initialState.selectedMediaDetails;
      state.similarMedia = initialState.similarMedia;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMediaDetailsAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(getMediaDetailsAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.selectedMediaDetails = action.payload;
      })
      .addCase(getSimilarMediaAsync.pending, (state) => {
        state.similarLoading = true;
      })
      .addCase(getSimilarMediaAsync.fulfilled, (state, action) => {
        state.similarLoading = false;
        state.similarMedia = action.payload;
      });
  },
});

export const { clearMediaDetails } = mediaDetailsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state.
export const selector = (state: RootState) => state.details;
export const mediaDetailsSelector = (state: RootState) =>
  selector(state).selectedMediaDetails;
export const similarMediaSelector = (state: RootState) =>
  selector(state).similarMedia;
export const loadingSelector = (state: RootState) => selector(state).loading;
export const loadingSimilarSelector = (state: RootState) =>
  selector(state).loading;

export default mediaDetailsSlice.reducer;
